import base64
import json
from typing import Tuple

from openai import OpenAI


class QuestionAnswerer:
    def __init__(self, openai_api_key: str):
        """
        Initialize the QuestionAnswerer class with API key for OpenAI.

        Args:
            openai_api_key (str): API key for OpenAI.
        """
        self.openai_client = OpenAI(api_key=openai_api_key)

    def encode_image(self, image_path: str) -> str:
        """
        Encode an image file as base64.

        Args:
            image_path (str): Path to the image file.

        Returns:
            str: Base64-encoded image data.
        """
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')

    def gpt4(self, image_path: str, prompt: str) -> Tuple[str, str]:
        """
        Send an image and prompt to the GPT-4 model and retrieve the answer.

        Args:
            image_path (str): Path to the image file.
            prompt (str): Prompt to send to the model.

        Returns:
            tuple: A tuple containing the answer (str) and the full response from the model (str).
        """
        prompt = json.dumps(prompt)
        base64_image = self.encode_image(image_path)

        openai_response = self.openai_client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": f"{prompt}"},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}",
                            },
                        },
                    ],
                }
            ]
        )
        response = str(openai_response.choices[0].message.content)

        answer = self._extract_answer(response)
        return answer, response

    def _extract_answer(self, response: str) -> str:
        """
        Extract the answer from the GPT-4 response.

        Args:
            response (str): The full response from GPT-4.

        Returns:
            str: The extracted answer, or an empty string if no answer is found.
        """
        start = response.find("<alternativa>")
        end = response.find("</alternativa>")

        if start != -1 and end != -1:
            return response[start + len("<alternativa>"):end]
        else:
            return ""

    def smart_gpt4(self, image_path: str, prompt: str, num_outputs: int = 3) -> Tuple[str, str, str]:
        """
        Generate multiple outputs using GPT-4, analyze them with a researcher, and resolve the best answer.

        Args:
            image_path (str): Path to the image file.
            prompt (str): Prompt to send to the model.
            num_outputs (int): Number of outputs to generate (default is 3).

        Returns:
            tuple: A tuple containing the resolver's answer (str), response (str), and prompt (str).
        """
        outputs = self._generate_outputs(image_path, prompt, num_outputs)
        research_response = self._research_outputs(image_path, outputs)
        resolver_answer, resolver_response, resolver_prompt = self._resolve_best_answer(image_path, outputs, research_response)

        return resolver_answer, resolver_response, resolver_prompt

    def _generate_outputs(self, image_path: str, prompt: str, num_outputs: int) -> list:
        """
        Generate multiple outputs using GPT-4.

        Args:
            image_path (str): Path to the image file.
            prompt (str): Prompt to send to the model.
            num_outputs (int): Number of outputs to generate.

        Returns:
            list: List of generated outputs.
        """
        outputs = []
        for _ in range(num_outputs):
            _, response = self.gpt4(image_path, prompt)
            outputs.append(response)
        return outputs

    def _research_outputs(self, image_path: str, outputs: list) -> str:
        """
        Analyze the outputs and identify the flaws and faulty logic in each response option.

        Args:
            image_path (str): Path to the image file.
            outputs (list): List of outputs generated by GPT-4.

        Returns:
            str: The researcher's response containing the analysis of the outputs.
        """
        num_outputs = len(outputs)
        research_prompt = "Eres un investigador encargado de analizar las {} respuestas proporcionadas a la pregunta en la imagen.\n\n--- Respuestas ---\n{}\n--- Fin de Respuestas ---\n\nEnumera las fallas y la lógica defectuosa de cada opción de respuesta en relación con la pregunta en la imagen. Trabajemos esto paso a paso para asegurarnos de tener todos los errores:".format(num_outputs, "\n".join(outputs))
        _, researcher_response = self.gpt4(image_path, research_prompt)
        return researcher_response

    def _resolve_best_answer(self, image_path: str, outputs: list, research_response: str) -> Tuple[str, str, str]:
        """
        Determine the best answer based on the researcher's analysis and improve it.

        Args:
            image_path (str): Path to the image file.
            outputs (list): List of outputs generated by GPT-4.
            research_response (str): The researcher's response containing the analysis of the outputs.

        Returns:
            tuple: A tuple containing the resolver's answer (str), response (str), and prompt (str).
        """
        num_outputs = len(outputs)
        resolver_prompt = "Eres un solucionador encargado de encontrar la alternativa correcta a la pregunta de la imagen. Para asegurarte de encontrar la respuesta correcta cuentas con:\n\n1. {} opciones de respuesta para que puedas ver distintas formas (correctas o incorrectas) de solucionar el problema\n\n2. Un análisis de un investigador que buscó las fallas lógicas de cada respuesta para que las tengas en cuenta.\n\nTu trabajo es tomar toda esta información e intentar responder la pregunta correctamente.\n\n--- Respuestas ---\n{}\n--- Fin de Respuestas ---\n\n--- Análisis del Investigador ---\n{}\n--- Fin del Análisis ---\n\nAntes de entregarme la alternativa correcta, por favor piensa esta pregunta paso a paso para asegurarte de que tienes la respuesta correcta. Escribe tu pensamiento entre etiquetas <pensando></pensando>.\n\nCuando tengas la respuesta correcta, escribe solo la letra de la alternativa correcta entre <alternativa></alternativa>, sin espacios ni caracteres adicionales. Por ejemplo, si la respuesta es la alternativa E, escribe '<alternativa>E</alternativa>'. Solo debe haber un caracter en mayúscula dentro de los tags <alternativa></alternativa>:".format(
            num_outputs,
            "\n".join([f"Respuesta {i+1}:\n{output}\n" for i, output in enumerate(outputs)]),
            research_response
        )
        resolver_answer, resolver_response = self.gpt4(image_path, resolver_prompt)

        return resolver_answer, resolver_response, resolver_prompt